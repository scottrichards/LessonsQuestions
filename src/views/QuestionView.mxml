<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		xmlns:mx="library://ns.adobe.com/flex/mx" 
		xmlns:BIP="components" 
		title="Lesson #{data.lessonName}"
		contentCreationComplete="contentCreationCompleted(event)" xmlns:components="components.*"
		>
	<s:layout>
		<s:VerticalLayout paddingTop="15" paddingBottom="15" paddingLeft="15" paddingRight="15" horizontalAlign="center" />
	</s:layout>
	
	<fx:Style>
		.myHeadingStyle { 
			fontSize: 24;
			fontWeight: bold;
		}
		
		.questionContentStyle { 
			fontSize: 20;
		}
	</fx:Style>
	
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			
			import components.BIPButton;
			
			public var correctAnswerId : String;
			public var wrongAnswerSounds :Array = new Array("error.mp3", "error1.mp3", "wrong-action.mp3");
			
			
			[Bindable]
			public var currentQuestion:Number;
			
			[Bindable]
			public var questionContentStr:String;
			
			[Bindable]
			public var imageUrlContents:String;
			
			
			protected function contentCreationCompleted(event:FlexEvent):void
			{
				currentQuestion = 0;
				trace("lessonName: " + data.lessonName);
				updateQuestionInfo();
				if (currentQuestion == 0) {
					previousButton.enabled = false;
				}
			}
			
			protected function nextButton_clickHandler(event:MouseEvent):void
			{
				currentQuestion++;
				previousButton.enabled = true;
				if (currentQuestion + 1 >= data.questions.length()) {
					nextButton.enabled = false;
				}
				updateQuestionInfo();
			}
			
			protected function previousButton_clickHandler(event:MouseEvent):void
			{
				currentQuestion--;
				nextButton.enabled = true;
				if (currentQuestion == 0) {
					previousButton.enabled = false;
				}
				updateQuestionInfo();
			}
			
			protected function lessonsButton_clickHandler(event:MouseEvent):void
			{
				navigator.popView();
			}
			
			protected function rightSelection(event:MouseEvent):void
			{
				trace("Yea you got it right!");	
				nextButton_clickHandler(event);
				playCorrectSound();
			}
			
			protected function playCorrectSound():void{
				playSound("sounds/cityrocker__thats-correct.mp3"); 
			}
			
			
			protected function playWrongSound():void{
				var length:uint = wrongAnswerSounds.length;
				var randomUint:uint = uint(Math.random() * length);
				var randomSound:String = "sounds/" + wrongAnswerSounds[randomUint];
				trace("Error Sound: " + randomSound);
				playSound(randomSound); 
			}
			
			protected function playSound(url:String):void{
				var req:URLRequest = new URLRequest(url); 
				var s:Sound = new Sound(req); 
				s.play();
			}
			
			
			
			protected function wrongSelection(event:MouseEvent):void
			{
				trace("Bummer you missed the question...");
				playWrongSound();
			}
			
			protected function updateQuestionType(question:XML):void{
				if (question.@questionType== "keyboardEntry") {
					answerTextArea.visible = false;
					answerTextArea.includeInLayout = false;
//					var numericKeypard = new NumericKeypad();
	//				answerTextArea.addElement();
				} else {
					answerTextArea.visible = true;
					answerTextArea.includeInLayout = true;
				}
			}
			
			protected function updateQuestionInfo():void 
			{
				var question:XML = data.questions[currentQuestion];
				if (question) {
					updateQuestionType(question);
					questionContentStr = question.questionContent;
					var imageUrlStr : String = String(question.imageInfo);
					var answers: XMLList = question.answers.answer;
					if (imageUrlStr.length > 0) {
						questionImage.visible = true;
						questionImage.percentWidth=50;
						questionContent.percentWidth=50;
						loadImage(question.imageInfo);
						questionImage.maxHeight=300;
					} else {	// make the text take up all of the space
						questionImage.percentWidth=0;
						questionContent.percentWidth=100;
						questionImage.width=0;
						questionImage.maxHeight=0;
						questionImage.visible = false;
					} 
					if (answers.length() > 0) {
						answerTextArea.visible = false;
						answerTextArea.includeInLayout = false;
						multipleChoiceSection.removeAllElements();	// remove any items that had been previously added
						for (var i : int; i < answers.length(); i++) {							
							var answerXML : XML = answers[i];
							var answerContents : String = answerXML[0];		// to get the contents out of the xml node reference first object
							var myButton : Button = new Button();
							myButton.label = answerContents;
							var isCorrect : String = answerXML.@correct;
							if (isCorrect == "true") {
								myButton.addEventListener( 'click', rightSelection );
							} else {
								myButton.addEventListener( 'click', wrongSelection );
							}
							trace("answer: " + answerContents + " correct: " + isCorrect);
							multipleChoiceSection.addElement(myButton);
							multipleChoiceSection.includeInLayout=true;
							multipleChoiceSection.visible = true;
						}
					} else {
						answerTextArea.visible = true;
						answerTextArea.includeInLayout = true;
						multipleChoiceSection.includeInLayout = false;
						multipleChoiceSection.visible = false;
					}
				}
			}
			
			private function loadImage(filePath:String):void
			{
				var loader:Loader = new Loader();
				loader.contentLoaderInfo.addEventListener(Event.COMPLETE,
					handleLoadComplete);
				/*				loader.load( new URLRequest(
				'http://covers.oreilly.com/images/9780596529857/bkt.gif' ) ); */
				
				loader.load( new URLRequest(
					filePath ) );
			}
			
			private function handleLoadComplete( evt:Event ):void
			{
				var bmp:Bitmap = ( evt.target as LoaderInfo ).content as Bitmap;
				questionImage.source = bmp;
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>

	<s:VGroup height="100%" minHeight="400" minWidth="500" horizontalAlign="center">
		<s:Spacer height="15" />
		<s:Group width="100%" >
			<!-- <s:Rect x="0" y="0" 
					radiusX="4" radiusY="4" 
					height="100%" width="100%">
				<s:stroke>
					<s:LinearGradientStroke weight="1" scaleMode="normal"/>
				</s:stroke>
				<s:fill>
					<s:LinearGradient>
						<s:entries>
							<mx:GradientEntry color="0x999999"/>
						</s:entries>
					</s:LinearGradient>
				</s:fill>
				
			</s:Rect> -->
			<s:Label id="questionNumber" text="Question #{currentQuestion+1}" paddingTop="10" horizontalCenter="0" styleName="myHeadingStyle"  />	
		</s:Group>
		
		<mx:Spacer height="15%"/>
		<s:HGroup width="100%" horizontalAlign="center">
			<s:Label id="questionContent" text="{questionContentStr}" width="100%" styleName="questionContentStyle" paddingRight="10" />
			<s:BitmapImage  id="questionImage" source="" fillMode="scale" scaleMode="stretch" maxWidth="400" maxHeight="300"  />
		</s:HGroup>
		<mx:Spacer height="10%"/>
		<s:HGroup id="answerSection" width="100%" gap="40" horizontalAlign="center">
			<s:TextArea id="answerTextArea" />	
			<components:NumericKeypad />
		</s:HGroup>
		<s:HGroup id="multipleChoiceSection" width="100%" gap="40" horizontalAlign="center" includeInLayout="false">
		</s:HGroup>
		<mx:Spacer height="10%"/>
	</s:VGroup>
	<s:VGroup verticalAlign="bottom" paddingBottom="40" width="500">
		<s:HGroup paddingBottom="15" width="100%" verticalAlign="bottom">
			<s:Button label="Previous" id="previousButton" click="previousButton_clickHandler(event)" icon="@Embed('icons/Previous.png')" />
			<mx:Spacer width="100%"/>
			<s:Button label="Next" id="nextButton" click="nextButton_clickHandler(event)" icon="@Embed('icons/Next.png')"  />	
		</s:HGroup>
		<s:Button label="&lt; Back to Lessons" id="backToLessonsButton" click="lessonsButton_clickHandler(event)" />
		
	</s:VGroup>

</s:View>
