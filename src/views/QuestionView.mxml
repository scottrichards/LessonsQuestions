<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		xmlns:mx="library://ns.adobe.com/flex/mx" 
		xmlns:BIP="components" 
		title="Lesson #{data.lessonName}"
		contentCreationComplete="contentCreationCompleted(event)" xmlns:components="components.*"
		backgroundColor="0xcccccc"
		>

	
	<fx:Style>
		.myHeadingStyle { 
			fontSize: 24;
			fontWeight: bold;
		}
		
		.questionContentStyle { 
			fontSize: 20;
		}
		
		.questionNoBorderContainer {
			alpha	: 0;
			borderVisible : false;
		}
		
		.questionShowBorderContainer {
			borderVisible : true;
		}
	</fx:Style>

	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:Fade id="fadeOut" 
				target="{this}"
				alphaFrom="1"
				alphaTo=".5"
				/>
		<s:Fade id="fadeIn" 
				target="{this}"
				alphaFrom=".5"
				alphaTo="1"
				/>
	</fx:Declarations>
	
	<s:states>
		<s:State name="default" />
		<s:State name="goToQuestion" />
		<s:State name="showAnswer" />
	</s:states>
	<s:transitions>
		<s:Transition fromState="default" toState="goToQuestion" >
				<s:Fade target="{viewContainer}" duration="1000" alphaFrom="1" alphaTo="0"  /> 
		</s:Transition>
		<s:Transition fromState="goToQuestion" toState="default">
			<s:Sequence>
				<!--<s:Fade target="{viewContainer}" duration="2000" alphaFrom="1" alphaTo="0" repeatBehavior="reverse" /> -->
				<s:Fade target="{viewContainer}" duration="1500" alphaFrom="0" alphaTo="1" />
			</s:Sequence>
		</s:Transition>
	</s:transitions>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import spark.components.TitleWindow;
			
			import components.BIPTitleWindow;
			import components.Currency;
			import components.DragDropView;
			import components.EqualitySymbols;
			import components.Equation;
			import components.ImperialMeasure;
			import components.MathWords;
			import components.MultipleChoice;
			import components.MyAlertPopUp;
			import components.NumericKeypad;
			import components.OperatorSymbols;
			import components.RewardImage;
			import components.ShapeNames;
			import components.Time;
			
			import events.CloseTitleWindow;
			
			import model.EquationData;
			
			protected var correctAnswerId : String;
			protected var correctAnswerStr : String;
			protected var wrongAnswerSounds :Array = new Array("error.mp3", "error1.mp3", "wrong-action.mp3", "HoustonProblem.mp3");
			protected var currentQuestionXML : XML;
			protected var currentQuestionType : String; 	// the type of the currently selected question
			protected var rewardTimer : Timer;
			protected var rewardView : RewardImage;
			
			protected var numericKeypad : NumericKeypad;	// TO DO inherit from subclass for all answer types
			protected var operatorSymbols : OperatorSymbols;
			protected var equalitySymbols : EqualitySymbols;
			protected var timeInput : Time;
			protected var measurement : ImperialMeasure;
			protected var currency : Currency;
			protected var shapeNames : ShapeNames;
			protected var multipleChoice : MultipleChoice;
			protected var equation : Equation;
			protected var dragDrop : DragDropView;
			protected var mathWords : MathWords;
			
			[Bindable]
			private var equationData:ArrayCollection = new ArrayCollection([
				{tag:'text', value:'Count by tens. 50, 60, '},
				{tag:'answer', value:'70', type:'numeric'},
				{tag:'text', value:', '},
				{tag:'answer', value:'80', type:'numeric'},
				{tag:'text', value:', '},
				{tag:'answer', value:'90', type:'numeric'},
				{tag:'text', value:', 100'},
			]);

			
			public var alertPopUp:MyAlertPopUp = new MyAlertPopUp();
			public var numberCorrectAnswers : uint;

			
			private var titleWindow:BIPTitleWindow;
			
			[Bindable]
			public var currentQuestion:Number;
			
			[Bindable]
			public var questionContentStr:String;
			
			[Bindable]
			public var imageUrlContents:String;
			
			[Bindable]
			public var statusStr:String;
			
			
			protected function contentCreationCompleted(event:FlexEvent):void
			{
				currentQuestion = 0;
				trace("lessonName: " + data.lessonName);
				updateQuestionInfo();
				if (currentQuestion == 0) {
					previousButton.enabled = false;
				}
				statusStr = "0  / " + data.questions.length();
			}
			
			
			protected function nextButton_clickHandler(event:MouseEvent):void
			{
				if (checkAnswer()) {
					goToNextQuestion(true);
				}
			}
			
			protected function passClickHandler(event:MouseEvent):void
			{
				goToNextQuestion(false);
			}
			
			protected function goToNextQuestion(displayTransition:Boolean = false):void
			{
				if (displayTransition)
					currentState = "goToQuestion";
				goToQuestion(++currentQuestion);
				if (displayTransition)
					currentState = "default";
			}
			
			protected function previousButton_clickHandler(event:MouseEvent):void
			{
				goToQuestion(--currentQuestion);
			}
			
			protected function goToQuestion(questionNumber:uint):void
			{
				if (questionNumber < data.questions.length()) {
					currentQuestion = questionNumber;
					if (currentQuestion == 0) {
						previousButton.enabled = false;
					} else {
						previousButton.enabled = true;
					}
					if (currentQuestion + 1 >= data.questions.length()) {
						nextButton.enabled = false;
					} else {
						nextButton.enabled = true;
					}
					updateQuestionInfo();
				} else {
					playSound("sounds/error1.mp3");
				}
			}
			
			protected function lessonsButton_clickHandler(event:MouseEvent):void
			{
				navigator.popView();
			}
			
			// this is currently only called for multiple choice questions
			protected function wrongSelectionHandler(event:MouseEvent):void
			{
				wrongSelection(correctAnswerStr);
			}
			
			protected function rightSelectionHandler(event:MouseEvent):void
			{
				rightSelection();
				goToNextQuestion();
			}
			
			protected function rightSelection():void
			{
				displayRewardImage();
				playCorrectSound();
				numberCorrectAnswers++;
				statusStr = numberCorrectAnswers.toString() + " / " + data.questions.length();
			}
			
			// when question is answered correctly display character image with an affirmation 
			protected function displayRewardImage():void
			{
				if (rewardView == null)
					rewardView = new RewardImage();
				addElement(rewardView);
				if (rewardTimer == null) {
					rewardTimer = new Timer(1000, 2);
					rewardTimer.addEventListener("timer", timerHandler);
				}
				rewardTimer.start();
			}
			
			protected function timerHandler(event:TimerEvent):void {
				trace("timerHandler: " + event);
				rewardTimer.stop();
				if (rewardView)
					removeElement(rewardView);
			}
			
			protected function wrongSelection(correctAnswer:String):void
			{
				trace("Bummer you missed the question...");
				var message:String = "The correct answer is: " + correctAnswer;
				showTitleWindow(message);
				playWrongSound();
			}
			
			protected function playCorrectSound():void{
				playSound("sounds/cityrocker__thats-correct.mp3"); 
			}
			
			
			protected function playWrongSound():void{
				var length:uint = wrongAnswerSounds.length;
				var randomUint:uint = uint(Math.random() * length);
				var randomSound:String = "sounds/" + wrongAnswerSounds[randomUint];
				trace("Error Sound: " + randomSound);
				playSound(randomSound); 
			}
			
			protected function playSound(url:String):void{
				var req:URLRequest = new URLRequest(url); 
				var s:Sound = new Sound(req); 
				s.play();
			}
			
			protected function dragDropContentCreationComplete(event:FlexEvent):void
			{
				dragDrop.setChoices(currentQuestionXML);
			}	
			
			protected function updateQuestionType(question:XML):void
			{
				trace("type: " + question.@type);
				currentQuestionType = question.@type;
				
				if (question.@type== "symbolOperators") {
					operatorSymbols = new OperatorSymbols();
					addToAnswer(operatorSymbols);
				} else if (question.@type== "symbolEquality") {
					equalitySymbols = new EqualitySymbols();
					addToAnswer(equalitySymbols);
				}  else if (question.@type== "time") {
					timeInput = new Time();
					addToAnswer(timeInput);
				}  else if (question.@type== "measurementImperial") {
					measurement = new ImperialMeasure();
					addToAnswer(measurement);
				}  else if (question.@type== "currency") {
					currency = new Currency();
					addToAnswer(currency);
				}  else if (question.@type== "shapeNames") {
					shapeNames = new ShapeNames();
					var answerXMLList:XMLList = currentQuestionXML.answer;
					var answerContents:String = answerXMLList[0];
					shapeNames.setAnswer(answerContents);
					addToAnswer(shapeNames);
				} else if (question.@type== "equation") {
					equation = new Equation();
					equation.addXMLData(currentQuestionXML);
					addToAnswer(equation);
				}  else if (question.@type== "dragDrop") {
					dragDrop = new DragDropView();
					dragDrop.addEventListener(FlexEvent.CONTENT_CREATION_COMPLETE,dragDropContentCreationComplete);
					addToAnswer(dragDrop);
					dragDrop.setAnswer(answerContents);
				} else if (question.@type== "mathWordsAddSub") {
					mathWords = new MathWords();
					mathWords.addXMLData(currentQuestionXML);
					var answerList:XMLList = currentQuestionXML.questionContent.answer;
					mathWords.setAnswer(answerList[0]);
					addToAnswer(mathWords);
				} else if (question.@type== "multipleChoice") {
					multipleChoice = new MultipleChoice();
					addToAnswer(multipleChoice);
				} 
				
				else {
					numericKeypad = new NumericKeypad();
					addToAnswer(numericKeypad);
				}
			}
			
			protected function addToAnswer(answerToAdd:*,removeQuestionContents:Boolean=false):void
			{
				answerSection.removeAllElements();	// remove any items that had been previously added
				answerSection.addElement(answerToAdd);
				if (removeQuestionContents) {
					
				}
			}
			
			
			private function showTitleWindow(message:String):void {
				// Create a non-modal TitleWindow container.
				fadeOut.end();
				fadeOut.play();
				titleWindow = PopUpManager.createPopUp(this, BIPTitleWindow, true) as BIPTitleWindow;
//				titleWindow.addEventListener(CloseEvent.CLOSE,closeTitleWindowHandler);
				titleWindow.addEventListener(CloseTitleWindow.EVENT_NAME, closeTitleWindowHandler);
				titleWindow.title = "Error";
				titleWindow.setMessage(message);
				PopUpManager.centerPopUp(titleWindow);
			}

			// invoked when the user closes out the Title Window Modal Dialog e.g. for displaying answers
			protected function closeTitleWindowHandler(event:Event):void
			{
				trace("Close Title Window");
				fadeIn.end();
				fadeIn.play();
				goToNextQuestion();
			}

			protected function updateQuestionInfo():void 
			{
				currentQuestionXML = data.questions[currentQuestion];
				if (currentQuestionXML) {
					updateQuestionType(currentQuestionXML);
					if (currentQuestionType == "equation" || currentQuestionType == "mathWordsAddSub") {
						questionContentStr = "";
					} else {
						questionContentStr = currentQuestionXML.questionContent;
					}
					
					var imageUrlStr : String = String(currentQuestionXML.imageInfo);
					var answers: XMLList = currentQuestionXML.answers.answer;
					// display the image
					if (imageUrlStr.length > 0) {
						questionImage.visible = true;
						loadImage(currentQuestionXML.imageInfo);
						questionImage.maxHeight=300;
						questionImage.includeInLayout = true;
					} else {	// make the text take up all of the space
						questionImage.maxHeight=0;
						questionImage.visible = false;
						questionImage.includeInLayout = false;
					} 
					if (answers.length() > 0) {
						multipleChoiceSection.removeAllElements();	// remove any items that had been previously added
						for (var i : int; i < answers.length(); i++) {							
							var answerXML : XML = answers[i];
							var answerContents : String = answerXML[0];		// to get the contents out of the xml node reference first object
							var myButton : Button = new Button();
							myButton.label = answerContents;
							var isCorrect : String = answerXML.@correct;
							if (isCorrect == "true") {
								correctAnswerStr = answerContents;
								myButton.addEventListener( 'click', rightSelectionHandler );
							} else {
								myButton.addEventListener( 'click', wrongSelectionHandler );
							}
							trace("answer: " + answerContents + " correct: " + isCorrect);
							multipleChoiceSection.addElement(myButton);
							multipleChoiceSection.includeInLayout=true;
							multipleChoiceSection.visible = true;
						}
					} else {
						multipleChoiceSection.includeInLayout = false;
						multipleChoiceSection.visible = false;
					}
				}
			}
			
			private function checkAnswer():Boolean
			{

				var answerNode:XMLList;
				var answerContents:String;
				var userAnswer:String;
				answerNode = currentQuestionXML.answer;
				answerContents = answerNode[0];
				if (currentQuestionXML.@type== "keyboardEntry") {
					userAnswer = numericKeypad.textInputField.text;
				} else if (currentQuestionXML.@type== "symbolOperators") {
					userAnswer = operatorSymbols.getText();
				} else if (currentQuestionXML.@type== "symbolEquality") {
					userAnswer = equalitySymbols.getText();
				} else if (currentQuestionXML.@type== "time") {
					userAnswer = timeInput.getText();
				} else if (currentQuestionXML.@type== "measurementImperial") {
					userAnswer = timeInput.getText();
				} else if (currentQuestionXML.@type== "currency") {
					userAnswer = currency.getText();
				} else if (currentQuestionXML.@type== "shapeNames") {
					userAnswer = shapeNames.getText();
				} else if (currentQuestionXML.@type== "multipleChoice") {
					showTitleWindow("Select one of the multiple choices");
// Display Pop Up (can't drag it lighter weight) need to figure out how to center it
//					alertPopUp.open(viewContainer,true);
//					alertPopUp.setAlert("Select one of the multiple choices");
					return false;
				} else if (currentQuestionXML.@type== "equation") {
					userAnswer = equation.response;
					answerContents = equation.correctAnswer;
				} else if (currentQuestionXML.@type== "dragDrop") {
					userAnswer = dragDrop.getAnswer();
				}  else if (currentQuestionXML.@type== "mathWordsAddSub") {
					userAnswer = mathWords.getText();
					answerContents = mathWords.getAnswer();
				} else {
					userAnswer = numericKeypad.textInputField.text;
				}
				trace("The correct answer is: " + answerContents + " you entered: " + userAnswer);
				if (answerContents == userAnswer) {
					rightSelection();
					return true;
				} else {
					wrongSelection(answerContents);
					return false;
				}
			}
			
			private function loadImage(filePath:String):void
			{
				var loader:Loader = new Loader();
				loader.contentLoaderInfo.addEventListener(Event.COMPLETE,
					handleLoadComplete);
				/*				loader.load( new URLRequest(
				'http://covers.oreilly.com/images/9780596529857/bkt.gif' ) ); */
				
				loader.load( new URLRequest(
					filePath ) );
			}
			
			private function handleLoadComplete( evt:Event ):void
			{
				var bmp:Bitmap = ( evt.target as LoaderInfo ).content as Bitmap;
				questionImage.source = bmp;
			}
			
			protected function jumpToQuestionButton_clickHandler(event:MouseEvent):void
			{
				var questionToGoTo : String = jumpToQuestionTextInput.text;
				goToQuestion(uint(questionToGoTo) - 1);
			}
			
		
		
			
//			protected function transitionTest(event:MouseEvent):void
//			{
//				currentState="goToQuestion";
//			}
			
		]]>
	</fx:Script>

	<s:navigationContent>
		<s:Button label="Lessons" click="navigator.popToFirstView();"/>
	</s:navigationContent>
	
	<s:VGroup paddingTop="15" paddingBottom="15" paddingLeft="15" paddingRight="15" horizontalAlign="center" width="100%">
		

		<s:HGroup id="statusSection" width="100%">
			<mx:Spacer width="100%" />
			<s:Label text="{statusStr}" paddingRight="10"/>
		</s:HGroup>
		<s:VGroup id="viewContainer" height="100%" minHeight="400" minWidth="500" horizontalAlign="center">
			
			<s:Group width="100%" >
				<s:Label id="questionNumber" text="Question #{currentQuestion+1}" paddingTop="10" horizontalCenter="0" styleName="myHeadingStyle"  />	
			</s:Group>
			
			<mx:Spacer height="15%"/>
			
			<s:VGroup width="100%" horizontalAlign="center">
				<!-- <s:BorderContainer styleName="questionNoBorderContainer"> -->
					<s:Label id="questionContent" text="{questionContentStr}"  styleName="questionContentStyle" paddingRight="10" maxWidth="700" />
				<!-- </s:BorderContainer> -->
				<s:BitmapImage  id="questionImage" source="" fillMode="scale" scaleMode="stretch" maxWidth="400" maxHeight="300"  />
			</s:VGroup>
			<mx:Spacer height="10%"/>
			<s:HGroup id="answerSection" width="100%" gap="40" horizontalAlign="center">	
			</s:HGroup>
			<s:HGroup id="multipleChoiceSection" width="100%" gap="40" horizontalAlign="center" includeInLayout="false">
			</s:HGroup>
			<mx:Spacer height="10%"/>
		</s:VGroup>
		<s:VGroup verticalAlign="bottom" paddingBottom="40" width="500">
			<s:HGroup paddingBottom="15" width="100%" verticalAlign="bottom">
				<s:Button label="Previous" id="previousButton" click="previousButton_clickHandler(event)" icon="@Embed('icons/Previous.png')" />
				<mx:Spacer width="100%"/>
				<s:Button label="Next" id="nextButton" click="nextButton_clickHandler(event)" icon="@Embed('icons/Next.png')"  />	
			</s:HGroup>
			<s:HGroup width="100%">
				<s:Button label="&lt; Back to Lessons" id="backToLessonsButton" click="lessonsButton_clickHandler(event)" />
				<mx:Spacer width="100%" />
				<s:TextInput id="jumpToQuestionTextInput" width="40" />
				<s:Button id="jumpToQuestionButton" label="Go" click="jumpToQuestionButton_clickHandler(event)" />
				<mx:Spacer width="100%"/>
				<s:Button label="Pass >" click="passClickHandler(event)" />
			</s:HGroup>
		
		</s:VGroup>
	</s:VGroup>
</s:View>
