<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 initialize="componentInitHandler(event)"
		 horizontalAlign="center">
	<fx:Style>
		.labelStyle { 
			fontSize: 30;
			fontWeight: bold;
		}
		
		.buttonStyle { 
			fontSize: 30;
		}
		
	</fx:Style>
	
	<fx:Script>
		<![CDATA[
			import spark.components.ToggleButton;
			
			import skins.ToggleButtonSkin;

			protected const NUMBER_OF_ANSWERS:uint = 4;
			public var distractors :Array = new Array("Cube", "Cone", "Cylinder", "Sphere", "Square", "Rectangle", "Triangle", "Pentagon", "Hexagon");
			protected var selectedButtonLabel : String;
			protected var _answer : String;
			protected var randomCorrectNumber : uint;
			private var buttonArray : Array;
			
			protected function componentInitHandler(event:Event):void {
				var distractorList : Dictionary = new Dictionary();
				var numDistractors : uint = 0;
				buttonArray = new Array();
				do {
					if (randomCorrectNumber == numDistractors) {
						numDistractors++;
						addButton("button" + numDistractors.toString(),_answer);
					} else {
						var randomInt:uint = uint(Math.random() * distractors.length);
						var newDistractor:String = distractors[randomInt];
						if (newDistractor != _answer && distractorList[newDistractor] == null) {
							distractorList[newDistractor] = newDistractor;
							numDistractors++;
							addButton("button" + numDistractors.toString(),newDistractor);
						}	
					}
				} while (numDistractors < NUMBER_OF_ANSWERS);				
			}
			
			protected function addButton(id:String,label:String):void 
			{
				var button:ToggleButton = new ToggleButton();
				buttonArray.push(button);
				button.id = id;
				button.label = label;
				button.setStyle('skinClass', skins.ToggleButtonSkin);  
				button.addEventListener(MouseEvent.CLICK,clickHandler);
				buttonGroup.addElement(button);
			}
			
			public function setQuestionXML(questionXML:XML):void 
			{
				var answerXMLList:XMLList = questionXML.answer;
				if (answerXMLList.length())
					this._answer = answerXMLList[0].toString();
				randomCorrectNumber = uint(Math.random() * NUMBER_OF_ANSWERS);
				trace("correct answer #: " + randomCorrectNumber + " answer = " + this._answer);
			}
			
			protected function clickHandler(event:MouseEvent):void
			{
				var buttonId : String = event.currentTarget.id;
				trace("click on buttonID: " + buttonId);
				var buttonLabel : String = event.currentTarget.label;
				selectedButtonLabel = buttonLabel;
				textLabel.text = selectedButtonLabel;
				disableOtherButtons(buttonId);
			}
			
			// when we click on a toggle button we want to deselect all the other buttons
			protected function disableOtherButtons(selectedButtonId:String):void
			{
				for (var i : int; i < buttonArray.length; i++) 	
				{
					var tb:ToggleButton = buttonArray[i];
					if (tb.id != selectedButtonId) 
						tb.selected = false;
				}
			}
			
			public function get response():String
			{
				return selectedButtonLabel;
			}
			
			public function get answer():String
			{
				return _answer;
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:Label id="textLabel" styleName="labelStyle" paddingBottom="10"  />
	<s:HGroup id="buttonGroup" gap="30" paddingTop="10">
	</s:HGroup>
</s:VGroup>
