<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 initialize="componentInitHandler(event)"
		 horizontalAlign="center">
	<fx:Style>
		.answerStyle { 
			fontSize: 20;
			fontWeight: bold;
			horizontalCenter : 0;
		}
		
		.buttonStyle { 
			fontSize: 30;
		}
		
	</fx:Style>
	
	<fx:Script>
		<![CDATA[
			import spark.components.Label;
			import mx.collections.ArrayCollection;
			
			import spark.components.ToggleButton;
			
			import model.EquationData;
			
			import skins.ToggleButtonSkin;

			protected const NUMBER_OF_ANSWERS:uint = 4;
			public var addSubtractDistractors :Array = new Array("addition", "subtraction", "sum", "difference");
			protected var selectedButtonLabel : String;
			protected var answer : String;
			protected var randomCorrectNumber : uint;
			private var buttonArray : Array;
			private var _data:ArrayCollection;	// array of the question content and answers
			private var _numTextLabels:uint;
			private var _numAnswers:uint;
			private var _answerLabel:Label;
			
			private static const LABEL_FIELD_WIDTH :uint = 120;
			private static const LABEL_FIELD_HEIGHT :uint = 35;
			
			// From the question node it finds questionContent and traverses all subnodes looking for <answer> tags
			public function addXMLData(question:XML):void
			{
				_data = new ArrayCollection();
				
				var questionContentList : XMLList = question.questionContent;
				var numItems:uint = questionContentList.length();
				if (numItems > 0) {
					var questionContentNode : XML = questionContentList[0];
					var childrenList : XMLList = questionContentNode.children();
					for each (var childNode:XML in childrenList) {
						var tag:String = "text";
						var type:String="";
						var value:String ="";
						var nodeKind : String = childNode.nodeKind(); 
						if (nodeKind == "text") {
							value = childNode.toString();
						} else if (nodeKind == "element") {
							var localName :String = childNode.name().localName;
							if (localName == "answer") {
								tag = "answer";
								value = childNode.toString();
							}
						} 
						var eqData:EquationData = new EquationData(tag,value);
						_data.addItem(eqData);
					}
				}
			}
			
			protected function componentInitHandler(event:Event):void {
				var distractorList : Dictionary = new Dictionary();
				var numDistractors : uint = 0;
				buttonArray = new Array();
				do {
					if (randomCorrectNumber == numDistractors) {
						numDistractors++;
						addButton("button" + numDistractors.toString(),answer);
					} else {
						var randomInt:uint = uint(Math.random() * addSubtractDistractors.length);
						var newDistractor:String = addSubtractDistractors[randomInt];
						if (newDistractor != answer && addSubtractDistractors[newDistractor] == null) {
							addSubtractDistractors[newDistractor] = newDistractor;
							numDistractors++;
							addButton("button" + numDistractors.toString(),newDistractor);
						}	
					}
				} while (numDistractors < NUMBER_OF_ANSWERS);				
			}
			
			// -----------------
			// overrides
			// -----------------
			
			override protected function createChildren():void
			{
				super.createChildren();
				_numTextLabels = 0;
				_numAnswers = 0;
				for each(var item:Object in _data)
				{
					if (item.tag == "text") {
						var textLabel:Label = new Label();
						textLabel.text = item.value;
						textLabel.name = "textLabel" + _numTextLabels.toString();
						textLabel.setStyle("fontSize",20);
						_numTextLabels++;
						questionGroup.addElement(textLabel);
					}
					if (item.tag == "answer") {		// we can only have one answer for Math Words
						_answerLabel = new Label();
						_answerLabel.styleName = "answerStyle";
						_answerLabel.width = LABEL_FIELD_WIDTH;
						_answerLabel.name = "answer" + _numAnswers.toString();
						trace("add ANSWER: " + _answerLabel.name);
						_answerLabel.height = LABEL_FIELD_HEIGHT;
						_numAnswers++;
						questionGroup.addElement(_answerLabel);
					}
				}
			}
			
			protected function addButton(id:String,label:String):void 
			{
				var button:ToggleButton = new ToggleButton();
				buttonArray.push(button);
				button.id = id;
				button.label = label;
				button.setStyle('skinClass', skins.ToggleButtonSkin);  
				button.addEventListener(MouseEvent.CLICK,clickHandler);
				buttonGroup.addElement(button);
			}
			
			public function setAnswer(answerStr:String):void 
			{
				this.answer = answerStr;
				randomCorrectNumber = uint(Math.random() * NUMBER_OF_ANSWERS);
				trace("correct answer #: " + randomCorrectNumber + " answer = " + answerStr);
			}
			
			public function getAnswer():String
			{
				return this.answer;	
			}
			
			protected function clickHandler(event:MouseEvent):void
			{
				var buttonId : String = event.currentTarget.id;
				trace("click on buttonID: " + buttonId);
				var buttonLabel : String = event.currentTarget.label;
				selectedButtonLabel = buttonLabel;
				_answerLabel.text = selectedButtonLabel;
				disableOtherButtons(buttonId);
			}
			
			// when we click on a toggle button we want to deselect all the other buttons
			protected function disableOtherButtons(selectedButtonId:String):void
			{
				for (var i : int; i < buttonArray.length; i++) 	
				{
					var tb:ToggleButton = buttonArray[i];
					if (tb.id != selectedButtonId) 
						tb.selected = false;
				}
			}
			
			public function getText():String
			{
				return selectedButtonLabel;
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:HGroup id="questionGroup">
		
	</s:HGroup>
	<s:HGroup id="buttonGroup" gap="30" paddingTop="10">
	</s:HGroup>
</s:VGroup>
