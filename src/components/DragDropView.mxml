<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		xmlns:mx="library://ns.adobe.com/flex/mx"
		title="DragDropView">
	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
		<fx:Style>
		.dragItem { 
			fontSize: 20;
			backgroundColor: #7A9091;
			color: #FFFFFF;
		}
			
		.dropTarget { 
			fontSize: 20;
			backgroundColor: #DDDDDD;
		}
	</fx:Style>
	<fx:Script>
		<![CDATA[
			import mx.core.DragSource;
			import mx.events.DragEvent;
			import mx.managers.DragManager;
			
			import spark.components.Label;
			import spark.components.SkinnableContainer;
			import spark.components.TextInput;
			
			private var answer : String;
			
			// Initializes the drag and drop operation.
			private function mouseMoveHandler(event:MouseEvent):void {
				
				// Get the drag initiator component from the event object.
				var dragInitiator:SkinnableContainer = SkinnableContainer(event.currentTarget);
				
				// Get the color of the drag initiator component.
				var dragColor:int = dragInitiator.getStyle('backgroundColor');
				
				var label:Label = dragInitiator.contentGroup.getChildByName("labelName") as Label;
				
				// Create a DragSource object.
				var ds:DragSource = new DragSource();
				
				// Add the data to the object.
				ds.addData(dragColor, 'color');
				if (label != null)
					ds.addData(label.text, 'label');
				
				// Call the DragManager doDrag() method to start the drag. 
				DragManager.doDrag(dragInitiator, ds, event);
			}
			
			// Called when the user moves the drag indicator onto the drop target.
			private function dragEnterHandler(event:DragEvent):void {
				
				// Accept the drag only if the user is dragging data 
				// identified by the 'color' format value.
				if (event.dragSource.hasFormat('color')) {
					
					// Get the drop target component from the event object.
					var dropTarget:SkinnableContainer = SkinnableContainer(event.currentTarget);
					// Accept the drop.
					DragManager.acceptDragDrop(dropTarget);
				}
			}
			
			// Called if the target accepts the dragged object and the user 
			// releases the mouse button while over the Canvas container. 
			private function dragDropHandler(event:DragEvent):void {
				var dropTargetItem:SkinnableContainer = SkinnableContainer(event.currentTarget);
				// Get the data identified by the color format 
				// from the drag source.
				var data:Object = event.dragSource.dataForFormat('color');
				var text:String = event.dragSource.dataForFormat('label') as String;
				// Set the canvas color.
				dropTargetItem.setStyle("backgroundColor", data);
				var targetLabel : Label = dropTargetItem.contentGroup.getChildByName("targetLabel") as Label;
				targetLabel.text = text;
			}    
			
			public function setAnswer(answerStr:String):void 
			{
				this.answer = answerStr;
			}
			
			public function setChoices(question:XML):void 
			{
				var choiceList : XMLList = question.choices.choice;
				var numItems:uint = choiceList.length();
				var maxWidth : Number;
				for each (var choiceNode:XML in choiceList) {
					var dragItem : DragItem = new DragItem();
					var label : Label = new Label();
					label.name = "labelName";
					label.text = choiceNode.toString();
					dragItem.addElement(label);
					dragItem.addEventListener(MouseEvent.MOUSE_MOVE,mouseMoveHandler);
					choiceGroup.addElement(dragItem);
					if (dragItem.width > maxWidth)
						maxWidth = dragItem.width;
				}
				for (var i:int;i<numItems;i++) {
					createDropTarget(maxWidth);
				}
			}
			
			protected function createDropTarget(maxWidth:Number):void
			{				
				var dropTarget : DropTargetContainer = new DropTargetContainer();
				var label : Label = new Label();
				label.name = "targetLabel";
				dropTarget.addElement(label);
				dropTarget.addEventListener(DragEvent.DRAG_ENTER,dragEnterHandler);
				dropTarget.addEventListener(DragEvent.DRAG_DROP,dragDropHandler);
				dropTarget.width = 120;
				dropGroup.addElement(dropTarget);
			}
			
			// Return the text the user entered in input fields separated by commas 
			public function getAnswer():String
			{
				var answerStr : String = "";
				var answerCount:uint = 0;
				var firstItem :Boolean = true;
				for (var i:int;i<dropGroup.numElements-1;i++)
				{
					var dropTarget : DropTargetContainer = dropGroup.getElementAt(i) as DropTargetContainer;
					var label : Label = dropTarget.getChildByName("targetLabel") as Label;
					if (label) {
						answerStr += label.text;
					}
				}
				return answerStr;
			}
		]]>
	</fx:Script>
	<s:VGroup>		
		<s:HGroup id="choiceGroup" gap="15">
		</s:HGroup>
		<s:HGroup id="dropGroup" gap="15">
		</s:HGroup>
	</s:VGroup>
</s:View>
