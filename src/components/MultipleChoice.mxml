<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 initialize="componentInitHandler(event)"
		 horizontalAlign="center">
	<fx:Style>
		.labelStyle { 
			fontSize: 30;
			fontWeight: bold;
		}
		
		.buttonStyle { 
			fontSize: 30;
		}
		
	</fx:Style>
	
	<fx:Script>
		<![CDATA[
			import spark.components.ToggleButton;
			import skins.ToggleButtonSkin;
			
			protected const NUMBER_OF_ANSWERS:uint = 4;
			private var _responseValue : String;
			protected var _answer : String;
			protected var _answerValue : String;
			protected var _response : String;
			protected var _buttonArray : Array;
			
			protected function componentInitHandler(event:Event):void {
				trace("initHandler");
			}
								
			protected function onClickHandler(event:MouseEvent):void
			{
				var buttonId : String = event.currentTarget.id;
				trace("click on buttonID: " + buttonId);
				_response = buttonId;
				_responseValue = event.currentTarget.label;
				responseLabel.text = event.currentTarget.label;
				disableOtherButtons(buttonId);
			}
			
			// when we click on a toggle button we want to deselect all the other buttons
			protected function disableOtherButtons(selectedButtonId:String):void
			{
				for (var i : int; i < _buttonArray.length; i++) 	
				{
					var tb:ToggleButton = _buttonArray[i];
					if (tb.id != selectedButtonId) { 
						tb.selected = false;
					}
				}
			}
			
			public function get responseValue():String
			{
				return _responseValue;
			}
			
			// return the the letter corresponding to the correct choice
			public function get answer():String
			{
				return _answer;	
			}
			
			// returns the full label corresponding to the answer instead of the letter correspoding to the choice
			public function get answerValue():String
			{
				return _answerValue;	
			}
			
			// return the user's selected Choice returns the letter corresponding to the choice
			public function get response():String
			{
				return _response;	
			}
			
			protected function setAnswer(questionXML:XML):void {
				var answerXMLList:XMLList = questionXML.answer;
				if (answerXMLList.length()) {
					this._answer = answerXMLList[0].toString();
				}
			}
			
			public function setQuestionXML(questionXML:XML):void
			{
				setAnswer(questionXML);
				var choices: XMLList = questionXML.choices.choice;
				_buttonArray = new Array();
				multipleChoiceSection.removeAllElements();	// remove any items that had been previously added
				for (var i : int; i < choices.length(); i++) {							
					var choiceXML : XML = choices[i];
					var choiceContents : String = choiceXML[0];		// to get the contents out of the xml node reference first object
					var choiceButton : ToggleButton = new ToggleButton();
					choiceButton.label = choiceContents;
					var letter : String = choiceXML.@letter;
					if (letter == _answer) {	// flag the text contents as being the correct answer
						_answerValue = choiceContents;
					}
					choiceButton.id = letter;	// set the id to the letter associated with the multiple choice option
					choiceButton.addEventListener( 'click', onClickHandler );
					trace(letter + ") " + choiceContents);
					multipleChoiceSection.addElement(choiceButton);
					_buttonArray.push(choiceButton);
					choiceButton.setStyle('skinClass', skins.ToggleButtonSkin);  
				}
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:Label id="responseLabel" styleName="labelStyle" paddingBottom="20"  />
	<s:HGroup id="multipleChoiceSection" width="100%" gap="40" horizontalAlign="center" >
	</s:HGroup>
</s:VGroup>
